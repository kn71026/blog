{"pages":[{"title":"","text":"--- layout: false --- google-site-verification: google276d74a03f21a0c8.html","link":"/blog/google276d74a03f21a0c8.html"},{"title":"About","text":"student@NCU","link":"/blog/about/index.html"}],"posts":[{"title":"GoogleOAuth串接及測試流程","text":"剛好最近在寫專題的登入功能，有接到google的OAuth，紀錄一下中間遇到的問題，跟最後跑起來的流程。api測試工具：Postman 參考文件 Google官方文件 Google官方前端範例code 運作流程因為前端的部分還沒完成，所以先以能用後端測試的方式去實作 前端點擊登入按鈕後，顯示大家常看到的google登入頁面 在登入成功後，google跳轉到特定頁面(後面會設定)，並回傳token 前端call後端寫的api，並將token一起傳過去 後端接收到token後，再call一次google的oauth api，並傳入前端給的token做二次的驗證 如果token(沒有遭到串改或過期)，根據token可拿到的scope回傳特定範圍的資料 後端擷取有用的資料後，存到自己專案的DB，並回傳資料給前端 在過程中，因為前端跟後端之間基本上是拿token做溝通的，所以也不需要將使用者的密碼存到DB中 Prerequirement 先到GCP建立一個新專案，之後要在裡面做設定 建立完成之後，選擇側邊欄的API和服務，並點擊憑證 進到憑證頁面後，按下上方的建立憑證，選擇OAuth用戶端ID 先來設定同意畫面，如果是只給機構內的使用者使用(如之前的Gsuite)，可以設定內部，如果是要大家都可以登入，則設定外部 並按下建立，開始設定應用程式資訊，以及支援信箱，在頁面的右邊，也顯示了提供的資訊會被如何展示 設定授權網域，通常在測試的時候會設定為本地端(需要設定實際測試時才能使用) 設定redirect_uri，也就是重新導向的頁面，回傳的token的資訊會在這這段網址之中 按下儲存後，設定範圍(scope)，設定你的應用程式能存取那些資訊，這邊設定的是使用者的openid、email、跟帳號資訊(姓、名、頭貼、語系) 在正式發布前，新增測試使用者，在發布前，要是測試使用者才能登入 最後回到憑證頁面，下載設定檔 到這邊為止，前置作業就完成啦，在設定檔中，主要會用到的有：client_id、client_secret 運作流程在開始使用之前，官方的文件中提供了各種參數的詳細介紹。 以這次要用到的OAuth 2.0為範例，有些參數會設置為必填： Parameters client_id Required 專案設定檔中的client_id redirect_uri Required user 成功登入後 redirects 的 URI response_type Required 回傳格式，這邊設為token scope Required 允許存取的範圍 執行步驟 進到google登入的畫面(可手刻按鈕或是使用官方提供的素材) 可以看一下在登入畫面的網址中有哪些資訊 若成功登入後，則會導向前面設定的redirect_uri，並拿到回傳的token call OAuth api 拿到使用者的資料 後續處理之後就能在自己後端的code中，以類似的方式去串接Google帳號了🎉🎉🎉","link":"/blog/api/googleoauth%E4%B8%B2%E6%8E%A5%E5%8F%8A%E6%B8%AC%E8%A9%A6%E6%B5%81%E7%A8%8B/"}],"tags":[{"name":"web","slug":"web","link":"/blog/tags/web/"},{"name":"Google OAuth","slug":"Google-OAuth","link":"/blog/tags/Google-OAuth/"}],"categories":[{"name":"api","slug":"api","link":"/blog/categories/api/"}]}